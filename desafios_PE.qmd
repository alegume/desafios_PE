---
title: ""
format: html
---

::: {style="text-align:center"}
<h1>Probabilidade e Estatística - Desafio 1</h1>
:::

![](images/ita.jpg){fig-align="center" width="200"}

::: {style="text-align:center; font-size:20px;"}
**Instituto Tecnológico de Aeronáutica**

**Professor**: Mauri Aparecido de Oliveira

**Aluno**: Alexandre A. A. M. de Abreu
:::

## Paciente

Um paciente apresenta um conjunto de sintomas que podem ser enquadrados em dois tipos de doenças, conforme apresentado a seguir.

**DOENÇA A:** Grave. Deve ser medicada senão as consequências são graves. Os remédios provocam efeitos colaterais.\
**DOENÇA B:** Sem nenhuma gravidade. A cura ocorre naturalmente. Exige apenas repouso.

Se a doença for **A** e medicar, a cura ocorrerá e a este evento associamos um valor de **+5.000**. Entretanto, se não medicar o quadro se complicará e a este evento associamos o valor **--10.000**. A primeira análise da situação conduz a uma probabilidade de **10%** da doença ser **A**. Se a doença for **B** e medicar, aparecerão efeitos colaterais indesejáveis e a este evento associamos o valor **--300**. A não medicar e esperar que os sintomas passem sozinhos associamos o valor **+500**.

#### A) Utilizando o critério do VE, recomende o procedimento a seguir.

Inicialmente, importa-se as bibliotecas necessárias e definem-se os dados para a criação da árvore de decisão.

```{r}
# warning = false
# Bibliotecas necessárias para criar árvores 
library(data.tree)
library(yaml)
library(dplyr)
library(usethis)
library(devtools)
library(DiagrammeR)
# Dados do problema instanciados como nós da árvore
node=as.Node(yaml.load("
name: Medicar
type: decision
VE: -220
Sim:
    type: chance
    desc: Doença
    penwidth: 2
    VE: -220
    A:
        type: terminal
        p: 0.1
        payoff: 500
        penwidth: 0.5
    B:
        type: terminal
        p: 0.9
        payoff: -300
        penwidth: 0.5
Não:
    type: chance
    desc: Doença
    payoff: -550
    penwidth: 0.5
    VE: -550
    A:
        type: terminal
        p: 0.1
        payoff: -10000
        penwidth: 0.5
    B:
        type: terminal
        p: 0.9
        payoff: 500
        penwidth: 0.5
"))
```

Na sequência, definem-se as funções utilitárias para definir estilos e demais confirações da árvore de decisão.

```{r}
# Função para definir nome dos nós
GetNodeLabel = function(node) switch(node$type, terminal = format(node$payoff, scientific = FALSE, big.mark = ","),  paste0(node$name, "\n[", node$VE, "]"))
# Função para definir valores nas arestas
GetEdgeLabel = function(node) {
  if (isNotRoot(node) && node$parent$type == 'chance') {
    label = paste0(node$name, " (", node$p, ")")
  } else {
    label = node$name
  }
  return (label)
}
# Funcão para definir o formato dos nós
GetNodeShape = function(node) switch(node$type, decision = "box", chance = "circle", terminal = "none")
# Funcão para definir o estilo das arestas
GetArrowHead = function(node) switch(node$type, terminal = "oinv", chance = "normal",  "none")
# Funcão para definir espessura das arestas
GetPenWidth = function(node) {node$penwidth}

# Definir os estilos
SetEdgeStyle(node, fontname = 'helvetica', label=GetEdgeLabel, arrowhead=GetArrowHead, penwidth=GetPenWidth)
SetNodeStyle(node, fontname = 'helvetica', label = GetNodeLabel, shape = GetNodeShape, fixedsize=T, fontsize = 9)
# Renderizar a árvore
ToDiagrammeRGraph(node,direction = "climb") %>%
  set_global_graph_attrs("layout", "dot", "graph") %>%
  add_global_graph_attrs("rankdir", "LR","graph") %>%
  render_graph()
```

#### B) Calcular o VEdIP.

#### C) É possível fazer testes e esperar para eventual início da medicação. O custo associado a estes testes (incluindo o da espera em si) é de 500. A eficiência do teste é P("A"/A) = 85% e P("NA"/NA)= 95%. Vale a pena submeter o paciente aos testes antes de decidir pela medicação ou não? Calcule VEdII.
