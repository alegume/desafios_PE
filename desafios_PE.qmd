---
title: ""
format:
  html:
    code-overflow: wrap
prefer-html: true
lang: pt-BR
---

::: {style="text-align:center"}
<h1>Probabilidade e Estatística - Desafio 1</h1>
:::

![](images/ita.jpg){fig-align="center" width="200"}

::: {style="text-align:center; font-size:20px;"}
**Instituto Tecnológico de Aeronáutica**

**Professor**: Mauri Aparecido de Oliveira

**Aluno**: Alexandre A. A. M. de Abreu
:::

## Paciente

Um paciente apresenta um conjunto de sintomas que podem ser enquadrados em dois tipos de doenças, conforme apresentado a seguir.

**DOENÇA A:** Grave. Deve ser medicada senão as consequências são graves. Os remédios provocam efeitos colaterais.\
**DOENÇA B:** Sem nenhuma gravidade. A cura ocorre naturalmente. Exige apenas repouso.

Se a doença for **A** e medicar, a cura ocorrerá e a este evento associamos um valor de **+5.000**. Entretanto, se não medicar o quadro se complicará e a este evento associamos o valor **--10.000**. A primeira análise da situação conduz a uma probabilidade de **10%** da doença ser **A**. Se a doença for **B** e medicar, aparecerão efeitos colaterais indesejáveis e a este evento associamos o valor **--300**. A não medicar e esperar que os sintomas passem sozinhos associamos o valor **+500**.

------------------------------------------------------------------------

### A) Utilizando o critério do VE, recomende o procedimento a seguir.

Inicialmente, as bibliotecas necessárias são importadas e definem-se os dados para o cálculo do Valor Esperado (VE) e para a criação da árvore de decisão.

```{r}
#| warning: false
# Bibliotecas necessárias para criar árvores 
library(data.tree)
library(yaml)
library(dplyr)
library(usethis)
library(devtools)
library(DiagrammeR)

pa <- 0.1       # Probabilidade da doença ser A
pb <- 0.9       # Probabilidade da doença ser B
v_am <- 5000    # Valor do evento: doença A e medicar
v_anm <- -10000 # Valor do evento: doença A e NAO medicar
v_bm <- -300    # Valor do evento: doença B e medicar
v_bnm <- 500    # Valor do evento: doença B e NAO medicar
VE.SIM <- pa * v_am + pb * v_bm
VE.NAO <- pa * v_anm + pb * v_bnm
VE = max(VE.SIM, VE.NAO) # Define o VE
VE

# Dados do problema instanciados como nós da árvore
dados=as.Node(yaml.load(stringr::str_interp("
name: Medicar
type: decision
VE: ${VE.SIM}
Sim:
    type: chance
    desc: Doença
    penwidth: 2
    VE: ${VE.SIM}
    A:
        type: terminal
        p: ${pa}
        payoff: ${v_am}
        penwidth: 0.5
    B:
        type: terminal
        p: ${pb}
        payoff: ${v_bm}
        penwidth: 0.5
Não:
    type: chance
    desc: Doença
    payoff: -550
    penwidth: 0.5
    VE: ${VE.NAO}
    A:
        type: terminal
        p: ${pa}
        payoff: ${v_anm}
        penwidth: 0.5
    B:
        type: terminal
        p: ${pb}
        payoff: ${v_bnm}
        penwidth: 0.5
")))
```

Na sequência, definem-se as funções utilitárias para configurar os estilos e demais detalhes da árvore de decisão.

```{r}
# Função para definir nome dos nós
GetNodeLabel = function(dados) switch(dados$type, terminal = format(dados$payoff, scientific = FALSE, big.mark = ".", decimal.mark = ","),  paste0(dados$name, "\n[", dados$VE, "]"))
# Função para definir valores nas arestas
GetEdgeLabel = function(node) {
  if (isNotRoot(node) && node$parent$type == 'chance') {
    label = paste0(node$name, " (", node$p, ")")
  } else {
    label = node$name
  }
  return (label)
}
# Funcão para definir o formato dos nós
GetNodeShape = function(dados) switch(dados$type, decision = "box", chance = "circle", terminal = "none")
# Funcão para definir o estilo das arestas
GetArrowHead = function(dados) switch(dados$type, terminal = "oinv",  "none")
# Funcão para definir espessura das arestas
GetPenWidth = function(node) {node$penwidth}

# Definir os estilos
SetEdgeStyle(dados, fontname = 'helvetica', label=GetEdgeLabel, arrowhead=GetArrowHead, penwidth=GetPenWidth, fontsize = 9)
SetNodeStyle(dados, fontname = 'helvetica', label = GetNodeLabel, shape = GetNodeShape, fixedsize=T, fontsize = 9)
# Renderizar a árvore
ToDiagrammeRGraph(dados,direction = "climb") %>%
  set_global_graph_attrs("layout", "dot", "graph") %>%
  add_global_graph_attrs("rankdir", "LR","graph") %>%
  render_graph()
```

Ao recomendar que o paciente tome a medicação, tem-se VE(Sim) = 230. Por outro lado, ao recomendar que o paciente não tome a medicação, VE(Não) = -550. Portanto, como VE(Sim) \> VE(Não), VE = 230 e **a recomendação a seguir é de que o paciente seja medicado**.

------------------------------------------------------------------------

### B) Calcular o VEdIP.

A incerteza envolvida neste problema é qual tipo de doença o paciente tem (doença A ou B). Em uma situação em que se pode obter uma Informação Perfeita, pode-se gerar a seguinte árvore, na qual a loteria não é mais "Doença" e sim "Informante".

```{r}
# Dados do problema instanciados como nós da árvore
dados=as.Node(yaml.load(stringr::str_interp('
name: Informante
type: chance
VE: ${pa * v_am + pb * v_bnm}
penwidth: 0.5
A:
    name: Medicar
    type: decision
    penwidth: 0.5
    desc: A
    Medicar:
        type: terminal
        p: ${pa}
        payoff: ${v_am}
        penwidth: 0.5
B:
    name: Não medicar
    desc: B
    type: decision
    payoff: -550
    penwidth: 0.5
    VE: -550
    Não medicar:
        type: terminal
        p: ${pb}
        payoff: ${v_bnm}
        penwidth: 0.5
')))
# Função para definir nome dos nós
GetNodeLabel = function(dados) switch(dados$type, terminal = format(dados$payoff, scientific = FALSE, big.mark = ".", decimal.mark = ","),  dados$name)
# Função para definir valores nas arestas
GetEdgeLabel = function(node) {
  if (isNotRoot(node) && node$parent$type == 'chance') {
    return(paste0("&ldquo;",node$desc ,"&rdquo;"))
  } else if (isNotRoot(node) && node$parent$type == 'decision') {
    return()
  }
}
# Funcão para definir o formato dos nós
GetNodeShape = function(dados) switch(dados$type, decision = "box", chance = "circle", terminal = "none")
# Funcão para definir o estilo das arestas
GetArrowHead = function(dados) switch(dados$type, terminal = "oinv", decision = "normal",  "none")
# Funcão para definir espessura das arestas
GetPenWidth = function(node) {node$penwidth}

# Definir os estilos
SetEdgeStyle(dados, fontname = 'helvetica', label=GetEdgeLabel, arrowhead=GetArrowHead, penwidth=GetPenWidth, fontsize = 7)
SetNodeStyle(dados, fontname = 'helvetica', label = GetNodeLabel, shape = GetNodeShape, fixedsize = T, fontsize = 6, width = 0.5, height = 0.3)
# Renderizar a árvore
ToDiagrammeRGraph(dados,direction = "climb") %>%
  set_global_graph_attrs("layout", "dot", "graph") %>%
  add_global_graph_attrs("rankdir", "LR","graph") %>%
  render_graph()
```

O Valor Esperado com Informação Perfeita (VEcIP) e Valor Esperado da Informação Perfeita (VEdIP) podem ser calculados da seguinte maneira:

```{r}
VEcIP <- pa * v_am + pb * v_bnm
VEdIP = VEcIP - VE
VEdIP
```

Dessa forma, tem-se que **VEdIP = 720**.

------------------------------------------------------------------------

### C) É possível fazer testes e esperar para eventual início da medicação. O custo associado a estes testes (incluindo o da espera em si) é de 500. A eficiência do teste é P("A"/A) = 85% e P("NA"/NA)= 95%. Vale a pena submeter o paciente aos testes antes de decidir pela medicação ou não? Calcule VEdII.

Inicialmente, serão consideradas as informações de eficiência do teste para calcular as probabilidades condicionais relacionadas ao resultado do teste e as probabilidades que resultam das probabilidades *a priori* em conjunção com a qualidade da informação. Como o paciente apresenta um conjunto de sintomas que pode caracterizar doença A ou B, NA significa B. Por exemplo, P("NA"\|NA) será representado por P("B"\|B).

```{r}
pta_a <- 0.85         # P("A"|A)
ptb_b <- 0.95         # P("B"|B)
ptb_a <- 1 - pta_a    # P("B"|A)
pta_b <- 1 - ptb_b    # P("A"|B)
# Dados 'a priori' + Qualidade
pta <- pa * pta_a + pb * pta_b  # P("A")
ptb <- pa * ptb_a + pb * ptb_b  # P("B")
cat(pta_a, ptb_b, ptb_a, pta_b, pta, ptb)
```

Usando a regra de Bayes, podemos calculas as probabilidades *a posteriori.*

```{r}
pa_ta <- round((pa * pta_a) / pta, digits = 4)   # P(A|"A")
pb_ta <- round((pb * pta_b) / pta, digits = 4)   # P(B|"A")
pa_tb <- round((pa * ptb_a) / ptb, digits = 4)   # P(A|"B")
pb_tb <- round((pb * ptb_b) / ptb, digits = 4)   # P(B|"B")
cat(pa_ta, pb_ta, pa_tb, pb_tb)
```

Após esses cálculos, é possível encontrar as demais informações necessárias para construir a árvore de decisão. A seguir, também são apresentados os cálculos do Valor Esperado com Informação Imperfeita (**VEcII = 689**) e Valor Esperado da Informação Imperfeita (**VEdII = 459**).

```{r}
# Valor esperado após o teste indicar "A" 
v_ta_m  <-  round(pa_ta * v_am + pb_ta * v_bm)
v_ta_nm <-  round(pa_ta * v_anm + pb_ta * v_bnm)
VA      <-  round(max(v_ta_m, v_ta_nm))

# Valor esperado após o teste indicar "B" 
v_tb_m <-   round(pa_tb * v_am + pb_tb * v_bm)
v_tb_nm <-  round(pa_tb * v_anm + pb_tb * v_bnm)
VB <- round(max(v_tb_m, v_tb_nm))

# Valor esperado com informação imperfeita
VEcII <- round(pta * VA + ptb * VB)
VEcII
# Valor esperado da informação imperfeita
VEdII <- VEcII - VE
VEdII
```

Com essas informações, é possível gerar a árvore de decisão da seguinte forma.

```{r}
# Dados do problema instanciados como nós da árvore
dados=as.Node(yaml.load(stringr::str_interp("
name: Testar
desc: Testar
type: decision
VE: ${VEcII}
Sim:
    type: chance
    desc: Teste
    penwidth: 2
    VE: ${VEcII}
    \\'A\\':
        type: decision
        desc: Medicar
        VE: ${VA}
        p: ${pta}
        Sim:
            type: chance
            desc: Resultado
            penwidth: 2
            VE: ${v_ta_m}
            A|\\'A\\':
                type: terminal
                p: ${pa_ta}
                payoff: ${v_am}
                penwidth: 0.5
            B|\\'A\\':
                type: terminal
                p: ${pb_ta}
                payoff: ${v_bm}
                penwidth: 0.5
        Não:
            type: chance
            desc: Resultado
            payoff: -550
            penwidth: 0.5
            VE: ${v_ta_nm}
            A|\\'A\\':
                type: terminal
                p: ${pa_ta}
                payoff: ${v_anm}
                penwidth: 0.5
            B|\\'A\\':
                type: terminal
                p: ${pb_ta}
                payoff: ${v_bnm}
                penwidth: 0.5
    \\'B\\':
        type: decision
        desc: Medicar
        VE: ${VB}
        p: ${ptb}
        Sim:
            type: chance
            desc: Resultado
            penwidth: 0.5
            VE: ${v_tb_m}
            A|\\'B\\':
                type: terminal
                p: ${pa_tb}
                payoff: ${v_am}
                penwidth: 0.5
            B|\\'B\\':
                type: terminal
                p: ${pb_tb}
                payoff: ${v_bm}
                penwidth: 0.5
        Não:
            type: chance
            desc: Resultado
            payoff: -550
            penwidth: 2
            VE: ${v_tb_nm}
            A|\\'B\\':
                type: terminal
                p: ${pa_tb}
                payoff: ${v_anm}
                penwidth: 0.5
            B|\\'B\\':
                type: terminal
                p: ${pb_tb}
                payoff: ${v_bnm}
                penwidth: 0.5
Não:
  type: decision
  desc: Medicar
  VE: ${VE}
  Sim:
      type: chance
      desc: Doença
      penwidth: 2
      VE: 230
      A:
          type: terminal
          p: ${pa}
          payoff: ${v_am}
          penwidth: 0.5
      B:
          type: terminal
          p: ${pb}
          payoff: ${v_bm}
          penwidth: 0.5
  Não:
      type: chance
      desc: Doença
      payoff: -550
      penwidth: 0.5
      VE: -550
      A:
          type: terminal
          p: ${pa}
          payoff: ${v_anm}
          penwidth: 0.5
      B:
          type: terminal
          p: ${pb}
          payoff: ${v_bnm}
          penwidth: 0.5
")))
# Função para definir nome dos nós
GetNodeLabel = function(dados) switch(dados$type, terminal = format(dados$payoff, scientific = FALSE, big.mark = ".", decimal.mark = ","),  paste0(dados$desc, "\n[", dados$VE, "]"))
# Função para definir valores nas arestas
GetEdgeLabel = function(node) {
  if (isNotRoot(node) && node$parent$type == 'chance') {
    # if (node$teste == True) {
    #   label = paste0(" (", node$name, ")")
    # }
    label = paste0(node$name, " (", node$p, ")")
  } else {
    label = node$name
  }
  return (label)
}
# Funcão para definir o formato dos nós
GetNodeShape = function(dados) switch(dados$type, decision = "box", chance = "circle", terminal = "none")
# Funcão para definir o estilo das arestas
GetArrowHead = function(dados) switch(dados$type, terminal = "oinv",  "none")
# Funcão para definir espessura das arestas
GetPenWidth = function(node) {node$penwidth}

# Definir os estilos
SetEdgeStyle(dados, fontname = 'helvetica', label=GetEdgeLabel, arrowhead=GetArrowHead, penwidth=GetPenWidth, fontsize = 9)
SetNodeStyle(dados, fontname = 'helvetica', label = GetNodeLabel, shape = GetNodeShape, fixedsize=T, fontsize = 8)
# Renderizar a árvore
arvore <- ToDiagrammeRGraph(dados, direction = "climb") %>%
  set_global_graph_attrs("layout", "dot", "graph") %>%
  add_global_graph_attrs("rankdir", "LR","graph")
render_graph(arvore, width = 500, height = 500)
```

Conforme calculado anteriormente, VEdII = 459. Considerando que o custo associado ao teste (incluindo a espera) é de 500, **não vale a pena submeter o paciente ao teste** uma vez que VEdII \< 500.
